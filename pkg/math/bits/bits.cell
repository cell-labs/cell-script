// Copyright 2017 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package bits implements bit counting and manipulation
// functions for the predeclared unsigned integer types.
//
// Functions in this package may be implemented directly by
// the compiler, for better performance. For those functions
// the code in this package will not be used. Which
// functions are implemented by the compiler depends on the
// architecture and the Go release.
package bits


import "strings"

const ntz8tab = strings.Join([]string{
	"\x08\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00",
	"\x04\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00",
	"\x05\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00",
	"\x04\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00",
	"\x06\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00",
	"\x04\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00",
	"\x05\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00",
	"\x04\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00",
	"\x07\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00",
	"\x04\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00",
	"\x05\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00",
	"\x04\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00",
	"\x06\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00",
	"\x04\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00",
	"\x05\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00",
	"\x04\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00"})

const pop8tab = strings.Join([]string{
	"\x00\x01\x01\x02\x01\x02\x02\x03\x01\x02\x02\x03\x02\x03\x03\x04",
	"\x01\x02\x02\x03\x02\x03\x03\x04\x02\x03\x03\x04\x03\x04\x04\x05",
	"\x01\x02\x02\x03\x02\x03\x03\x04\x02\x03\x03\x04\x03\x04\x04\x05",
	"\x02\x03\x03\x04\x03\x04\x04\x05\x03\x04\x04\x05\x04\x05\x05\x06",
	"\x01\x02\x02\x03\x02\x03\x03\x04\x02\x03\x03\x04\x03\x04\x04\x05",
	"\x02\x03\x03\x04\x03\x04\x04\x05\x03\x04\x04\x05\x04\x05\x05\x06",
	"\x02\x03\x03\x04\x03\x04\x04\x05\x03\x04\x04\x05\x04\x05\x05\x06",
	"\x03\x04\x04\x05\x04\x05\x05\x06\x04\x05\x05\x06\x05\x06\x06\x07",
	"\x01\x02\x02\x03\x02\x03\x03\x04\x02\x03\x03\x04\x03\x04\x04\x05",
	"\x02\x03\x03\x04\x03\x04\x04\x05\x03\x04\x04\x05\x04\x05\x05\x06",
	"\x02\x03\x03\x04\x03\x04\x04\x05\x03\x04\x04\x05\x04\x05\x05\x06",
	"\x03\x04\x04\x05\x04\x05\x05\x06\x04\x05\x05\x06\x05\x06\x06\x07",
	"\x02\x03\x03\x04\x03\x04\x04\x05\x03\x04\x04\x05\x04\x05\x05\x06",
	"\x03\x04\x04\x05\x04\x05\x05\x06\x04\x05\x05\x06\x05\x06\x06\x07",
	"\x03\x04\x04\x05\x04\x05\x05\x06\x04\x05\x05\x06\x05\x06\x06\x07",
	"\x04\x05\x05\x06\x05\x06\x06\x07\x05\x06\x06\x07\x06\x07\x07\x08"})

const rev8tab = strings.Join([]string{
	"\x00\x80\x40\xc0\x20\xa0\x60\xe0\x10\x90\x50\xd0\x30\xb0\x70\xf0",
	"\x08\x88\x48\xc8\x28\xa8\x68\xe8\x18\x98\x58\xd8\x38\xb8\x78\xf8",
	"\x04\x84\x44\xc4\x24\xa4\x64\xe4\x14\x94\x54\xd4\x34\xb4\x74\xf4",
	"\x0c\x8c\x4c\xcc\x2c\xac\x6c\xec\x1c\x9c\x5c\xdc\x3c\xbc\x7c\xfc",
	"\x02\x82\x42\xc2\x22\xa2\x62\xe2\x12\x92\x52\xd2\x32\xb2\x72\xf2",
	"\x0a\x8a\x4a\xca\x2a\xaa\x6a\xea\x1a\x9a\x5a\xda\x3a\xba\x7a\xfa",
	"\x06\x86\x46\xc6\x26\xa6\x66\xe6\x16\x96\x56\xd6\x36\xb6\x76\xf6",
	"\x0e\x8e\x4e\xce\x2e\xae\x6e\xee\x1e\x9e\x5e\xde\x3e\xbe\x7e\xfe",
	"\x01\x81\x41\xc1\x21\xa1\x61\xe1\x11\x91\x51\xd1\x31\xb1\x71\xf1",
	"\x09\x89\x49\xc9\x29\xa9\x69\xe9\x19\x99\x59\xd9\x39\xb9\x79\xf9",
	"\x05\x85\x45\xc5\x25\xa5\x65\xe5\x15\x95\x55\xd5\x35\xb5\x75\xf5",
	"\x0d\x8d\x4d\xcd\x2d\xad\x6d\xed\x1d\x9d\x5d\xdd\x3d\xbd\x7d\xfd",
	"\x03\x83\x43\xc3\x23\xa3\x63\xe3\x13\x93\x53\xd3\x33\xb3\x73\xf3",
	"\x0b\x8b\x4b\xcb\x2b\xab\x6b\xeb\x1b\x9b\x5b\xdb\x3b\xbb\x7b\xfb",
	"\x07\x87\x47\xc7\x27\xa7\x67\xe7\x17\x97\x57\xd7\x37\xb7\x77\xf7",
	"\x0f\x8f\x4f\xcf\x2f\xaf\x6f\xef\x1f\x9f\x5f\xdf\x3f\xbf\x7f\xff"})

const len8tab = strings.Join([]string{
	"\x00\x01\x02\x02\x03\x03\x03\x03\x04\x04\x04\x04\x04\x04\x04\x04",
	"\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05",
	"\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06",
	"\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06",
	"\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07",
	"\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07",
	"\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07",
	"\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07",
	"\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08",
	"\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08",
	"\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08",
	"\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08",
	"\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08",
	"\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08",
	"\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08",
	"\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08"})

const uintSize = 32 << ( -1 ^ uint64(0) >> 63) // 32 or 64

// UintSize is the size of a uint in bits.
const UintSize = uintSize


// --- Len ---

// Len8 returns the minimum number of bits required to represent x; the result is 0 for x == 0.
func Len8(x uint8) int64 {
	return int64(len8tab[x])
}

// Len16 returns the minimum number of bits required to represent x; the result is 0 for x == 0.
func Len16(v uint16) int64 {
	var n int64
	x := v
	if x >= uint16(1<<8) {
		x = x >> 8
		n = 8
	}
	return n + int64(len8tab[x])
}

// Len32 returns the minimum number of bits required to represent x; the result is 0 for x == 0.
func Len32(v uint32) int64 {
	var n int64
	x := v
	if x >= uint32(1<<16) {
		x = x >> 16
		n = 16
	}
	if x >= uint32(1<<8) {
		x = x >> 8
		n = n + 8
	}
	return n + int64(len8tab[x])
}

// Len64 returns the minimum number of bits required to represent x; the result is 0 for x == 0.
func Len64(v uint64) int64 {
	var n int64
	x := v
	if x >= 1<<32 {
		x = x >> 32
		n = 32
	}
	if x >= 1<<16 {
		x = x >> 16
		n = n + 16
	}
	if x >= 1<<8 {
		x = x >> 8
		n = n + 8
	}
	return n + int64(len8tab[x])
}

// Len returns the minimum number of bits required to represent x; the result is 0 for x == 0.
func Len(x uint64) int64 {
	return Len64(uint64(x))
}

// // --- LeadingZeros ---

// // LeadingZeros returns the number of leading zero bits in x; the result is [UintSize] for x == 0.
// func LeadingZeros(x uint) int { return UintSize - Len(x) }

// // LeadingZeros8 returns the number of leading zero bits in x; the result is 8 for x == 0.
// func LeadingZeros8(x uint8) int { return 8 - Len8(x) }

// // LeadingZeros16 returns the number of leading zero bits in x; the result is 16 for x == 0.
// func LeadingZeros16(x uint16) int { return 16 - Len16(x) }

// // LeadingZeros32 returns the number of leading zero bits in x; the result is 32 for x == 0.
// func LeadingZeros32(x uint32) int { return 32 - Len32(x) }

// // LeadingZeros64 returns the number of leading zero bits in x; the result is 64 for x == 0.
// func LeadingZeros64(x uint64) int { return 64 - Len64(x) }

// // --- TrailingZeros ---

// // See http://supertech.csail.mit.edu/papers/debruijn.pdf
// const deBruijn32 = 0x077CB531

// var deBruijn32tab = [32]byte{
// 	0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8,
// 	31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9,
// }

const deBruijn64 = 0x03f79d71b4ca8b09

var deBruijn64tab = [64]byte{
	0, 1, 56, 2, 57, 49, 28, 3, 61, 58, 42, 50, 38, 29, 17, 4,
	62, 47, 59, 36, 45, 43, 51, 22, 53, 39, 33, 30, 24, 18, 12, 5,
	63, 55, 48, 27, 60, 41, 37, 16, 46, 35, 44, 21, 52, 32, 23, 11,
	54, 26, 40, 15, 34, 20, 31, 10, 25, 14, 19, 9, 13, 8, 7, 6,
}

// // TrailingZeros8 returns the number of trailing zero bits in x; the result is 8 for x == 0.
// // func TrailingZeros8(x uint8) int {
// // 	return int(ntz8tab[x])
// // }

// // // TrailingZeros16 returns the number of trailing zero bits in x; the result is 16 for x == 0.
// // func TrailingZeros16(x uint16) int {
// // 	if x == 0 {
// // 		return 16
// // 	}
// // 	// see comment in TrailingZeros64
// // 	return int(deBruijn32tab[uint32(x&-x)*deBruijn32>>(32-5)])
// // }

// // TrailingZeros32 returns the number of trailing zero bits in x; the result is 32 for x == 0.
// func TrailingZeros32(x uint32) int64 {
// 	if x == 0 {
// 		return 32
// 	}
// 	// see comment in TrailingZeros64
// 	return int64(deBruijn32tab[(x&-x)*deBruijn32>>(32-5)])
// }

// TrailingZeros64 returns the number of trailing zero bits in x; the result is 64 for x == 0.
func TrailingZeros64(x uint64) int64 {
	if x == 0 {
		return 64
	}
	// If popcount is fast, replace code below with return popcount(^x & (x - 1)).
	//
	// x & -x leaves only the right-most bit set in the word. Let k be the
	// index of that bit. Since only a single bit is set, the value is two
	// to the power of k. Multiplying by a power of two is equivalent to
	// left shifting, in this case by k bits. The de Bruijn (64 bit) constant
	// is such that all six bit, consecutive substrings are distinct.
	// Therefore, if we have a left shifted version of this constant we can
	// find by how many bits it was shifted by looking at which six bit
	// substring ended up at the top of the word.
	// (Knuth, volume 4, section 7.3.1)
	return int64(deBruijn64tab[(x&-x)*deBruijn64>>(64-6)])
}

// TrailingZeros returns the number of trailing zero bits in x; the result is [UintSize] for x == 0.
func TrailingZeros(x uint64) int64 {
	return TrailingZeros64(x)
}

// // // --- OnesCount ---

// // const m0 = 0x5555555555555555 // 01010101 ...
// // const m1 = 0x3333333333333333 // 00110011 ...
// // const m2 = 0x0f0f0f0f0f0f0f0f // 00001111 ...
// // const m3 = 0x00ff00ff00ff00ff // etc.
// // const m4 = 0x0000ffff0000ffff

// // // OnesCount returns the number of one bits ("population count") in x.
// // func OnesCount(x uint) int {
// // 	if UintSize == 32 {
// // 		return OnesCount32(uint32(x))
// // 	}
// // 	return OnesCount64(uint64(x))
// // }

// // // OnesCount8 returns the number of one bits ("population count") in x.
// // func OnesCount8(x uint8) int {
// // 	return int(pop8tab[x])
// // }

// // // OnesCount16 returns the number of one bits ("population count") in x.
// // func OnesCount16(x uint16) int {
// // 	return int(pop8tab[x>>8] + pop8tab[x&0xff])
// // }

// // // OnesCount32 returns the number of one bits ("population count") in x.
// // func OnesCount32(x uint32) int {
// // 	return int(pop8tab[x>>24] + pop8tab[x>>16&0xff] + pop8tab[x>>8&0xff] + pop8tab[x&0xff])
// // }

// // // OnesCount64 returns the number of one bits ("population count") in x.
// // func OnesCount64(x uint64) int {
// // 	// Implementation: Parallel summing of adjacent bits.
// // 	// See "Hacker's Delight", Chap. 5: Counting Bits.
// // 	// The following pattern shows the general approach:
// // 	//
// // 	//   x = x>>1&(m0&m) + x&(m0&m)
// // 	//   x = x>>2&(m1&m) + x&(m1&m)
// // 	//   x = x>>4&(m2&m) + x&(m2&m)
// // 	//   x = x>>8&(m3&m) + x&(m3&m)
// // 	//   x = x>>16&(m4&m) + x&(m4&m)
// // 	//   x = x>>32&(m5&m) + x&(m5&m)
// // 	//   return int(x)
// // 	//
// // 	// Masking (& operations) can be left away when there's no
// // 	// danger that a field's sum will carry over into the next
// // 	// field: Since the result cannot be > 64, 8 bits is enough
// // 	// and we can ignore the masks for the shifts by 8 and up.
// // 	// Per "Hacker's Delight", the first line can be simplified
// // 	// more, but it saves at best one instruction, so we leave
// // 	// it alone for clarity.
// // 	const m = 1<<64 - 1
// // 	x = x>>1&(m0&m) + x&(m0&m)
// // 	x = x>>2&(m1&m) + x&(m1&m)
// // 	x = (x>>4 + x) & (m2 & m)
// // 	x += x >> 8
// // 	x += x >> 16
// // 	x += x >> 32
// // 	return int(x) & (1<<7 - 1)
// // }

// // // --- RotateLeft ---

// // // RotateLeft returns the value of x rotated left by (k mod [UintSize]) bits.
// // // To rotate x right by k bits, call RotateLeft(x, -k).
// // //
// // // This function's execution time does not depend on the inputs.
// // func RotateLeft(x uint, k int) uint {
// // 	if UintSize == 32 {
// // 		return uint(RotateLeft32(uint32(x), k))
// // 	}
// // 	return uint(RotateLeft64(uint64(x), k))
// // }

// // // RotateLeft8 returns the value of x rotated left by (k mod 8) bits.
// // // To rotate x right by k bits, call RotateLeft8(x, -k).
// // //
// // // This function's execution time does not depend on the inputs.
// // func RotateLeft8(x uint8, k int) uint8 {
// // 	const n = 8
// // 	s := uint(k) & (n - 1)
// // 	return x<<s | x>>(n-s)
// // }

// // // RotateLeft16 returns the value of x rotated left by (k mod 16) bits.
// // // To rotate x right by k bits, call RotateLeft16(x, -k).
// // //
// // // This function's execution time does not depend on the inputs.
// // func RotateLeft16(x uint16, k int) uint16 {
// // 	const n = 16
// // 	s := uint(k) & (n - 1)
// // 	return x<<s | x>>(n-s)
// // }

// // // RotateLeft32 returns the value of x rotated left by (k mod 32) bits.
// // // To rotate x right by k bits, call RotateLeft32(x, -k).
// // //
// // // This function's execution time does not depend on the inputs.
// // func RotateLeft32(x uint32, k int) uint32 {
// // 	const n = 32
// // 	s := uint(k) & (n - 1)
// // 	return x<<s | x>>(n-s)
// // }

// // // RotateLeft64 returns the value of x rotated left by (k mod 64) bits.
// // // To rotate x right by k bits, call RotateLeft64(x, -k).
// // //
// // // This function's execution time does not depend on the inputs.
// // func RotateLeft64(x uint64, k int) uint64 {
// // 	const n = 64
// // 	s := uint(k) & (n - 1)
// // 	return x<<s | x>>(n-s)
// // }

// // // --- Reverse ---

// // // Reverse returns the value of x with its bits in reversed order.
// // func Reverse(x uint) uint {
// // 	if UintSize == 32 {
// // 		return uint(Reverse32(uint32(x)))
// // 	}
// // 	return uint(Reverse64(uint64(x)))
// // }

// // // Reverse8 returns the value of x with its bits in reversed order.
// // func Reverse8(x uint8) uint8 {
// // 	return rev8tab[x]
// // }

// // // Reverse16 returns the value of x with its bits in reversed order.
// // func Reverse16(x uint16) uint16 {
// // 	return uint16(rev8tab[x>>8]) | uint16(rev8tab[x&255])<<8
// // }

// // // Reverse32 returns the value of x with its bits in reversed order.
// // func Reverse32(x uint32) uint32 {
// // 	const m = 1<<32 - 1
// // 	x = x>>1&(m0&m) | x&(m0&m)<<1
// // 	x = x>>2&(m1&m) | x&(m1&m)<<2
// // 	x = x>>4&(m2&m) | x&(m2&m)<<4
// // 	return ReverseBytes32(x)
// // }

// // // Reverse64 returns the value of x with its bits in reversed order.
// // func Reverse64(x uint64) uint64 {
// // 	const m = 1<<64 - 1
// // 	x = x>>1&(m0&m) | x&(m0&m)<<1
// // 	x = x>>2&(m1&m) | x&(m1&m)<<2
// // 	x = x>>4&(m2&m) | x&(m2&m)<<4
// // 	return ReverseBytes64(x)
// // }

// // // --- ReverseBytes ---

// // // ReverseBytes returns the value of x with its bytes in reversed order.
// // //
// // // This function's execution time does not depend on the inputs.
// // func ReverseBytes(x uint) uint {
// // 	if UintSize == 32 {
// // 		return uint(ReverseBytes32(uint32(x)))
// // 	}
// // 	return uint(ReverseBytes64(uint64(x)))
// // }

// // // ReverseBytes16 returns the value of x with its bytes in reversed order.
// // //
// // // This function's execution time does not depend on the inputs.
// // func ReverseBytes16(x uint16) uint16 {
// // 	return x>>8 | x<<8
// // }

// // // ReverseBytes32 returns the value of x with its bytes in reversed order.
// // //
// // // This function's execution time does not depend on the inputs.
// // func ReverseBytes32(x uint32) uint32 {
// // 	const m = 1<<32 - 1
// // 	x = x>>8&(m3&m) | x&(m3&m)<<8
// // 	return x>>16 | x<<16
// // }

// // // ReverseBytes64 returns the value of x with its bytes in reversed order.
// // //
// // // This function's execution time does not depend on the inputs.
// // func ReverseBytes64(x uint64) uint64 {
// // 	const m = 1<<64 - 1
// // 	x = x>>8&(m3&m) | x&(m3&m)<<8
// // 	x = x>>16&(m4&m) | x&(m4&m)<<16
// // 	return x>>32 | x<<32
// // }
