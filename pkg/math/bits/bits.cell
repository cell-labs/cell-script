package bits

import "strings"

// "\x00\x01\x02\x02\x03\x03\x03\x03\x04\x04\x04\x04\x04\x04\x04\x04",
// "\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05",
// "\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06",
// "\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06",
// "\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07",
// "\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07",
// "\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07",
// "\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07",
// "\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08",
// "\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08",
// "\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08",
// "\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08",
// "\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08",
// "\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08",
// "\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08",
// "\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08"
const len8tab = "\x00\x01\x02\x02\x03\x03\x03\x03\x04\x04\x04\x04\x04\x04\x04\x04\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08"

const uintSize = 32 << ( -1 ^ uint64(0) >> 63) // 32 or 64

// UintSize is the size of a uint in bits.
const UintSize = uintSize


// --- Len ---

// Len8 returns the minimum number of bits required to represent x; the result is 0 for x == 0.
func Len8(x uint8) int64 {
	return int64(len8tab[x])
}

// Len16 returns the minimum number of bits required to represent x; the result is 0 for x == 0.
func Len16(v uint16) int64 {
	var n int64
	x := v
	if x >= uint16(1<<8) {
		x = x >> uint16(8)
		n = 8
	}
	return n + int64(len8tab[x])
}

// Len32 returns the minimum number of bits required to represent x; the result is 0 for x == 0.
func Len32(v uint32) int64 {
	var n int64
	x := v
	if x >= uint32(1<<16) {
		x = x >> uint32(16)
		n = 16
	}
	if x >= uint32(1<<8) {
		x = x >> uint32(8)
		n = n + 8
	}
	return n + int64(len8tab[x])
}

// Len64 returns the minimum number of bits required to represent x; the result is 0 for x == 0.
func Len64(v uint64) int64 {
	var n int64
	x := v
	if x >= 1<<32 {
		x = x >> 32
		n = 32
	}
	if x >= 1<<16 {
		x = x >> 16
		n = n + 16
	}
	if x >= 1<<8 {
		x = x >> 8
		n = n + 8
	}
	return n + int64(len8tab[x])
}

// Len returns the minimum number of bits required to represent x; the result is 0 for x == 0.
func Len(x uint64) int64 {
	return Len64(uint64(x))
}

// // --- LeadingZeros ---

// // LeadingZeros returns the number of leading zero bits in x; the result is [UintSize] for x == 0.
// func LeadingZeros(x uint) int { return UintSize - Len(x) }

// // LeadingZeros8 returns the number of leading zero bits in x; the result is 8 for x == 0.
// func LeadingZeros8(x uint8) int { return 8 - Len8(x) }

// // LeadingZeros16 returns the number of leading zero bits in x; the result is 16 for x == 0.
// func LeadingZeros16(x uint16) int { return 16 - Len16(x) }

// // LeadingZeros32 returns the number of leading zero bits in x; the result is 32 for x == 0.
// func LeadingZeros32(x uint32) int { return 32 - Len32(x) }

// // LeadingZeros64 returns the number of leading zero bits in x; the result is 64 for x == 0.
// func LeadingZeros64(x uint64) int { return 64 - Len64(x) }

// // --- TrailingZeros ---

// // See http://supertech.csail.mit.edu/papers/debruijn.pdf
// const deBruijn32 = 0x077CB531

// var deBruijn32tab = [32]byte{
// 	0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8,
// 	31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9,
// }

const deBruijn64 = 0x03f79d71b4ca8b09

var deBruijn64tab = [64]uint64{
	0, 1, 56, 2, 57, 49, 28, 3, 61, 58, 42, 50, 38, 29, 17, 4,
	62, 47, 59, 36, 45, 43, 51, 22, 53, 39, 33, 30, 24, 18, 12, 5,
	63, 55, 48, 27, 60, 41, 37, 16, 46, 35, 44, 21, 52, 32, 23, 11,
	54, 26, 40, 15, 34, 20, 31, 10, 25, 14, 19, 9, 13, 8, 7, 6,
}

// // TrailingZeros8 returns the number of trailing zero bits in x; the result is 8 for x == 0.
// // func TrailingZeros8(x uint8) int {
// // 	return int(ntz8tab[x])
// // }

// // // TrailingZeros16 returns the number of trailing zero bits in x; the result is 16 for x == 0.
// // func TrailingZeros16(x uint16) int {
// // 	if x == 0 {
// // 		return 16
// // 	}
// // 	// see comment in TrailingZeros64
// // 	return int(deBruijn32tab[uint32(x&-x)*deBruijn32>>(32-5)])
// // }

// // TrailingZeros32 returns the number of trailing zero bits in x; the result is 32 for x == 0.
// func TrailingZeros32(x uint32) int64 {
// 	if x == 0 {
// 		return 32
// 	}
// 	// see comment in TrailingZeros64
// 	return int64(deBruijn32tab[(x&-x)*deBruijn32>>(32-5)])
// }

// TrailingZeros64 returns the number of trailing zero bits in x; the result is 64 for x == 0.
func TrailingZeros64(x uint64) int64 {
	if x == 0 {
		return 64
	}

	return int64(deBruijn64tab[(x&-x)*deBruijn64>>(64-6)])
}

// TrailingZeros returns the number of trailing zero bits in x; the result is [UintSize] for x == 0.
func TrailingZeros(x uint64) int64 {
	return TrailingZeros64(x)
}

