package ckb

type cpointer *uint8

extern (
	func __slice_get_ptr(s cpointer) *uint8
	func __slice_set_len(s cpointer, size uint32)
	// reference from ckb_syscall_apis.h
	func ckb_load_tx_hash(addr *uint8, len *uint64, offset uint) int
	func ckb_load_transaction(addr *uint8, len *uint64, offset uint) int
	func ckb_load_script_hash(addr *uint8, len *uint64, offset uint) int
	func ckb_load_script(addr *uint8, len *uint64, offset uint) int

	func ckb_load_cell(addr *uint8, len *uint64, offset uint, index uint, source uint) int
	func ckb_load_input(addr *uint8, len *uint64, offset uint, index uint, source uint) int
	func ckb_load_header(addr *uint8, len *uint64, offset uint, index uint, source uint) int
	func ckb_load_witness(addr *uint8, len *uint64, offset uint, index uint, source uint) int
	func ckb_load_cell_by_field(addr *uint8, len *uint64, offset uint, index uint, source uint, field uint) int
	func ckb_load_header_by_field(addr *uint8, len *uint64, offset uint, index uint, source uint, field uint) int
	func ckb_load_input_by_field(addr *uint8, len *uint64, offset uint, index uint, source uint, field uint) int
	func ckb_load_cell_data(addr *uint8, len *uint64, offset uint, index uint, source uint) int
	func ckb_vm_version() int
	func ckb_current_cycles() uint64
	// todo
	// func ckb_exec_cell(code_hash *byte, hash_type uint8, offset uint32, length uint8, argc int, argv []*byte) int
)

const (
	CKB_SUCCESS = 0
)