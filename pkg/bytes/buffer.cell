package bytes

import (
	"errors"
	"io" // 
	"unicode/utf8" //
)

const smallBufferSize = 64
type readOp uint64

type Buffer table {
	buf      []byte // contents are the bytes buf[off : len(buf)]
	off      uint32    // read at &buf[off], write at &buf[len(buf)]
	lastRead readOp // last read operation, so that Unread* can work correctly.
}

const (
	opRead      = -1 // Any other read operation.
	opInvalid   = 0  // Non-read operation.
	opReadRune1 = 1  // Read rune of size 1.
	opReadRune2 = 2  // Read rune of size 2.
	opReadRune3 = 3  // Read rune of size 3.
	opReadRune4 = 4  // Read rune of size 4.
)

var ErrTooLarge = errors.New("bytes.Buffer: too large")
var errNegativeRead = errors.New("bytes.Buffer: reader returned negative count from Read")

const maxInt = 2147483647

func (b *Buffer) empty() bool {
	return len(b.buf) <= b.off
}

func (b *Buffer) Reset() {
	b.buf = []byte{}
	b.off = uint32(0)
	b.lastRead = opInvalid
}

func (b *Buffer) Bytes() []byte {
	return b.buf[b.off:]
}

func (b *Buffer) Read(p []byte) (n uint32, err error) {
	b.lastRead = opInvalid
	if b.empty() {
		// Buffer is empty, reset to recover space.
		b.Reset()
		return n, io.EOF
	}
	n = len(b.buf)
	for i, _ := range b.buf[b.off:] {
		p[i] = b.buf[b.off + uint32(i)]
	}
	b.off = b.off + n
	if n > uint32(0) {
		b.lastRead = opRead
	}
	return n, errors.None()
}

func (b *Buffer) Write(p []byte) (n uint32, err error) {
	for _, v := range p {
		b.buf = append(b.buf, v)
	}
	return len(p), errors.None()
}

func NewBuffer(bytes []byte) Buffer {
	var b Buffer
	b.buf = bytes
	return b
}
