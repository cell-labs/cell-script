package binary

import (
	"errors"
	"io"
	// "math"
	// "reflect"
	// "sync"
)

type ByteOrder interface {
	Uint16([]byte) uint16
	Uint32([]byte) uint32
	Uint64([]byte) uint64
	PutUint16([]byte, uint16)
	PutUint32([]byte, uint32)
	PutUint64([]byte, uint64)
	String() string
}

type AppendByteOrder interface {
	AppendUint16([]byte, uint16) []byte
	AppendUint32([]byte, uint32) []byte
	AppendUint64([]byte, uint64) []byte
	String() string
}

type littleEndian table{}
type bigEndian table{}
type nativeEndian table{}

var LittleEndian littleEndian
var BigEndian bigEndian

func (le littleEndian) Uint16(b []byte) uint16 {
	return uint16(b[0]) | uint16(b[1])<<uint16(8)
}

func (le littleEndian) PutUint16(b []byte, v uint16) {
	b[0] = byte(v)
	b[1] = byte(v >> uint16(8))
}

func (le littleEndian) AppendUint16(b []byte, v uint16) []byte {
	return append(b,
		byte(v),
		byte(v>>uint16(8)),
	)
}

func (le littleEndian) Uint32(b []byte) uint32 {
	return uint32(b[0]) | uint32(b[1])<<uint32(8) | uint32(b[2])<<uint32(16) | uint32(b[3])<<uint32(24)
}

func (le littleEndian) PutUint32(b []byte, v uint32) {
	b[0] = byte(v)
	b[1] = byte(v >> uint32(8))
	b[2] = byte(v >> uint32(16))
	b[3] = byte(v >> uint32(24))
}

func (le littleEndian) AppendUint32(b []byte, v uint32) []byte {
	return append(b,
		byte(v),
		byte(v>>uint32(8)),
		byte(v>>uint32(16)),
		byte(v>>uint32(24)),
	)
}

func (le littleEndian) Uint64(b []byte) uint64 {
	ret := uint64(b[0])
	ret = ret | uint64(b[1])<<8
	ret = ret | uint64(b[2])<<16
	ret = ret | uint64(b[3])<<24
	ret = ret | uint64(b[4])<<32
	ret = ret | uint64(b[5])<<40
	ret = ret | uint64(b[6])<<48
	ret = ret | uint64(b[7])<<56
	return ret
}

func (le littleEndian) PutUint64(b []byte, v uint64) {
	b[0] = byte(v)
	b[1] = byte(v >> uint64(8))
	b[2] = byte(v >> uint64(16))
	b[3] = byte(v >> uint64(24))
	b[4] = byte(v >> uint64(32))
	b[5] = byte(v >> uint64(40))
	b[6] = byte(v >> uint64(48))
	b[7] = byte(v >> uint64(56))
}

func (le littleEndian) AppendUint64(b []byte, v uint64) []byte {
	return append(b,
		byte(v),
		byte(v>>8),
		byte(v>>16),
		byte(v>>24),
		byte(v>>32),
		byte(v>>40),
		byte(v>>48),
		byte(v>>56),
	)
}

func (le littleEndian) String() string {
	return "LittleEndian"
}

func (le littleEndian) GoString() string {
	return "binary.LittleEndian"
}



// func (be bigEndian) Uint16(b []byte) uint16 {
// 	_ = b[1] // bounds check hint to compiler; see golang.org/issue/14808
// 	return uint16(b[1]) | uint16(b[0])<<8
// }

// func (be bigEndian) PutUint16(b []byte, v uint16) {
// 	_ = b[1] // early bounds check to guarantee safety of writes below
// 	b[0] = byte(v >> 8)
// 	b[1] = byte(v)
// }

func (be bigEndian) AppendUint16(b []byte, v uint16) []byte {
	return append(b,
		byte(v>>uint16(8)),
		byte(v),
	)
}

func (be bigEndian) Uint32(b []byte) uint32 {
	return uint32(b[3]) | uint32(b[2])<<uint32(8) | uint32(b[1])<<uint32(16) | uint32(b[0])<<uint32(24)
}

func (be bigEndian) PutUint32(b []byte, v uint32) {
	b[0] = byte(v >> uint32(24))
	b[1] = byte(v >> uint32(16))
	b[2] = byte(v >> uint32(8))
	b[3] = byte(v)
}

func (be bigEndian) AppendUint32(b []byte, v uint32) []byte {
	return append(b,
		byte(v>>uint32(24)),
		byte(v>>uint32(16)),
		byte(v>>uint32(8)),
		byte(v),
	)
}

func (be bigEndian) Uint64(b []byte) uint64 {
	ret := uint64(b[7])
	ret = ret | uint64(b[6])<<8
	ret = ret | uint64(b[5])<<16
	ret = ret | uint64(b[4])<<24
	ret = ret | uint64(b[3])<<32
	ret = ret | uint64(b[2])<<40
	ret = ret | uint64(b[1])<<48
	ret = ret | uint64(b[0])<<56
	return ret
}

func (be bigEndian) PutUint64(b []byte, v uint64) {
	b[0] = byte(v >> uint64(56))
	b[1] = byte(v >> uint64(48))
	b[2] = byte(v >> uint64(40))
	b[3] = byte(v >> uint64(32))
	b[4] = byte(v >> uint64(24))
	b[5] = byte(v >> uint64(16))
	b[6] = byte(v >> uint64(8))
	b[7] = byte(v)
}

func (be bigEndian) AppendUint64(b []byte, v uint64) []byte {
	return append(b,
		byte(v>>uint64(56)),
		byte(v>>uint64(48)),
		byte(v>>uint64(40)),
		byte(v>>uint64(32)),
		byte(v>>uint64(24)),
		byte(v>>uint64(16)),
		byte(v>>uint64(8)),
		byte(v),
	)
}

func (be bigEndian) String() string {
	return "BigEndian"
}

func (be bigEndian) GoString() string {
	return "binary.BigEndian"
}

func (ne nativeEndian) String() string {
	return "NativeEndian"
}

func (ne nativeEndian) GoString() string {
	return "binary.NativeEndian"
}
