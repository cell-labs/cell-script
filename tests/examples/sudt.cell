
import (
	"debug"
	"encoding/binary"
	"ckb"
)

const (
	ERROR_SCRIPT_ERROR = 0

)

func main() {
	script := ckb.loadScript()
	if !ckb.verifyScript(script) {
		return ERROR_SCRIPT_ERROR
	}
	rawArgs := script.Args().AsSlice()
	lockInScriptArgs := make(string, rawArgs)

	// check owner mode
	ownerMode := false
	txInputCells := ckb.txInputCells()
	if txInputCells == 0 {
		return 1
	}
	
	for i := 0; i < txInputCells; i++ {
		cell := ckb.inputCell(i)
		codeHash := cell.Lock().CodeHash()
		lock := make(string, codeHash.AsSlice())
		if lock == lockInScriptArgs {
 			ownerMode = true
			break
		}
	}

	if ownerMode {
		return 0
	}

	// sudt cell
	// data: amount uint128
	// https://docs-xi-two.vercel.app/docs/rfcs/0025-simple-udt/0025-simple-udt#sudt-cell
	inSum := 0u128
	for i := 0; i < ckb.scriptInputCells(); i++ {
		raw := ckb.loadInputCellData(i)
		amount := binary.ReadUint128FromSlice(raw, binary.LittleEndian)
		inSum += amount
	}

	outSum := 0u128
	for i := 0; i < ckb.scriptOutputCells(); i++ {
		raw := ckb.loadOutputCellData(i)
		amount := binary.ReadUint128FromSlice(raw, binary.LittleEndian)
		inSum += amount
	}

	if inSum < outSum {
		panic("invalid amount")
		return 1
	}

	return 0
}