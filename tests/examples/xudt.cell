package main

import (
	"debug"
	"os"
	"tx"
)

const (
	FLAGS_SIZE                     = 4
	OWNER_MODE_INPUT_TYPE_MASK     = 0x80000000
	OWNER_MODE_OUTPUT_TYPE_MASK    = 0x40000000
	OWNER_MODE_INPUT_LOCK_NOT_MASK = 0x20000000
	OWNER_MODE_MASK                = (OWNER_MODE_INPUT_TYPE_MASK | OWNER_MODE_OUTPUT_TYPE_MASK | OWNER_MODE_INPUT_LOCK_NOT_MASK)
)

const (
	XUDTFlagsPlain  = iota // sudt
	XUDTFlagsInArgs        // scripts is in args
	XUDTFlagsInWitness
)

const (
	SUCCESS
	// 0 is the only success code. We can use 0 directly.

	// inherit from simple_udt
	ERROR_ARGUMENTS_LEN   = -1
	ERROR_ENCODING        = -2
	ERROR_SYSCALL         = -3
	ERROR_SCRIPT_TOO_LONG = -21
	ERROR_OVERFLOWING     = -51
	ERROR_AMOUNT          = -52

	// error code is starting from 40 to avoid conflict with
	// common error code in other scripts.
	ERROR_CANT_LOAD_LIB    = 40
	ERROR_CANT_FIND_SYMBOL = iota
	ERROR_INVALID_RCE_ARGS
	ERROR_NOT_ENOUGH_BUFF
	ERROR_INVALID_FLAG

	ERROR_INVALID_ARGS_FORMAT

	ERROR_INVALID_WITNESS_FORMAT
	ERROR_INVALID_MOL_FORMAT
	ERROR_BLAKE2B_ERROR
	ERROR_HASH_MISMATCHED
// ERROR_RCRULES_TOO_DEEP  // 50
// ERROR_TOO_MANY_RCRULES
// ERROR_RCRULES_PROOFS_MISMATCHED
// ERROR_SMT_VERIFY_FAILED
// ERROR_RCE_EMERGENCY_HALT
// ERROR_NOT_VALIDATED
// ERROR_TOO_MANY_LOCK
// ERROR_ON_BLACK_LIST
// ERROR_ON_BLACK_LIST2
// ERROR_NOT_ON_WHITE_LIST
// ERROR_TYPE_FREEZED  // 60
// ERROR_APPEND_ONLY
// ERROR_EOF
// ERROR_TOO_LONG_PROOF
)

func getFlagFromArgs(args string) uint64 {
	// args.size() >= 4
	// big-edian
	byte0 := uint64(args[0+tx.BLAKE2B_BLOCK_SIZE])
	byte1 := uint64(args[1+tx.BLAKE2B_BLOCK_SIZE])
	byte2 := uint64(args[2+tx.BLAKE2B_BLOCK_SIZE])
	byte3 := uint64(args[3+tx.BLAKE2B_BLOCK_SIZE])
	val := (byte0 << 24)
	val += (byte1 << 16)
	val += (byte2 << 8)
	val += byte3
	return val
}

func getOwnerModeCheckMethod(val uint64) (bool, bool, bool) {
	owner_mode_for_input_type := false
	owner_mode_for_output_type := false
	// default is on
	owner_mode_for_input_lock := true
	if (val & OWNER_MODE_INPUT_TYPE_MASK) != 0 {
		owner_mode_for_input_type = true
	}
	if (val & OWNER_MODE_OUTPUT_TYPE_MASK) != 0 {
		owner_mode_for_output_type = true
	}
	if (val & OWNER_MODE_INPUT_LOCK_NOT_MASK) != 0 {
		owner_mode_for_input_lock = false
	}
	return owner_mode_for_input_type, owner_mode_for_input_lock, owner_mode_for_output_type
}

func main() {
	ok := tx.scriptVerify()
	args := tx.xudtArgs()
	val := getFlagFromArgs(args)
	owner_mode_for_input_type, owner_mode_for_input_lock, owner_mode_for_output_type := getOwnerModeCheckMethod()

	// owner mode checking
	var owner_mode tx.OptionBool
	if owner_mode_for_input_lock && owner_mode.val == false {
		owner_mode = tx.checkOwnerMode(tx.CKB_SOURCE_INPUT, tx.CKB_CELL_FIELD_LOCK_HASH)
		if owner_mode.err != SUCCESS {
			os.exit(owner_mode.err)
		}
	}

	if owner_mode_for_input_type && owner_mode.val == false {
		owner_mode = tx.checkOwnerMode(tx.CKB_SOURCE_INPUT, tx.CKB_CELL_FIELD_TYPE_HASH)
		if owner_mode.err != SUCCESS {
			os.exit(owner_mode.err)
		}
	}
	if owner_mode_for_output_type && owner_mode.val == false {
		owner_mode = tx.checkOwnerMode(tx.CKB_SOURCE_OUTPUT, tx.CKB_CELL_FIELD_TYPE_HASH)
		if owner_mode.err != SUCCESS {
			os.exit(owner_mode.err)
		}
	}

	hashes := tx.lockScripts()
	debug.Printf("%d\n", len(hashes)) // 32 byte
	// for _, ch := range hashes {
	//     debug.Printf("%d\n", ch)
	// }

	// parse xUDT args
	argsSize := len(args)
	data := ""
	flags := 0
	if argsSize < (FLAGS_SIZE + tx.BLAKE2B_BLOCK_SIZE) {
		flags = XUDTFlagsPlain
	} else {
		mask := OWNER_MODE_MASK ^ -1 // 0x1FFFFFF
		tempFlags := val & mask
		if tempFlags == XUDTFlagsPlain {
			flags = XUDTFlagsPlain
		} else if tempFlags == XUDTFlagsInArgs {
			flags = XUDTFlagsInArgs
			data = args[tx.BLAKE2B_BLOCK_SIZE+FLAGS_SIZE:]
			// vector <Script> is a dynvec
			vecSize := tx.getVectorRawByteSize(data)
			if vecSize != argsSize-tx.BLAKE2B_BLOCK_SIZE+FLAGS_SIZE {
				return ERROR_INVALID_ARGS_FORMAT
			}
			// return SUCCESS
		} else if tempFlags == XUDTFlagsInWitness {
			hash_size := argsSize - tx.BLAKE2B_BLOCK_SIZE - FLAGS_SIZE
			if hash_size != tx.BLAKE160_SIZE {
				return ERROR_INVALID_FLAG
			}
			blake160Hash := args[tx.BLAKE2B_BLOCK_SIZE+FLAGS_SIZE:]
			witness := tx.getWitness()
			witnessBlake2bHash := tx.getBlake2b()
			if witnessBlake2bHash[0:tx.BLAKE160_SIZE] == blake160Hash {
				return ERROR_HASH_MISMATCHED
			}
			// return SUCCESS
		} else {
			return ERROR_INVALID_FLAG
		}
	}

	// enable owner script via a script in witness
	if owner_mode.val == false {
		// get Owner Script, optional filed from witnessArgs.inputType
		ownerScriptRawBytes := "" // witness.intput.ownerScript
		// compute blake2b hash for owner script
		ownerScriptHash := tx.getBlake2b(ownerScriptRawBytes)
		// get 32 byte hash from args
		argsFromHash := args[0:tx.BLAKE2B_BLOCK_SIZE]
		if ownerScriptHash != argsFromHash {
			return ERROR_HASH_MISMATCHED
		}

		// decode ownerScript raw bytes to Script
		var ownerScript cell.Script
		err := tx.executeFunc(ownerScriptHash, ownerScript.hashType, "validate", owner_mode.val, 0, ownerScript.args)
		if err == SUCCESS {
			owner_mode.val = true
		}
	}

	// sudt
	in_sum, out_sum := 0, 0
	ins := tx.inputs()
	if len(ins) == int32(0) {
		return ERROR_AMOUNT
	}
	for input := range tx.inputs() {
		in_sum += input
	}

	for output := range tx.outputs() {
		out_sum += output
	}

	if in_sum < out_sum {
		debug.Printf("Invalid Amount")
		return ERROR_AMOUNT
	}
	// Plain mode get done here
	if flags == XUDTFlagsPlain {
    	return SUCCESS
  	}
	// todo: decode extension scripts
	var extensionScripts []cell.Script
	// execute all scripts
	for i, script := range(extensionScripts) {
		tx.executeFunc(script.codeHash, script.hashType, "validate", owner_mode.val, i, script.args)
	}
	return SUCCESS
}
