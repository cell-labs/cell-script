
package main

import (
	"debug"
	"os"
	"tx"
	"bytes"
	"encoding/binary"
)

const (
	FLAGS_SIZE                     = 4
	OWNER_MODE_INPUT_TYPE_MASK     = 0x80000000
	OWNER_MODE_OUTPUT_TYPE_MASK    = 0x40000000
	OWNER_MODE_INPUT_LOCK_NOT_MASK = 0x20000000
	OWNER_MODE_MASK                = (OWNER_MODE_INPUT_TYPE_MASK | OWNER_MODE_OUTPUT_TYPE_MASK | OWNER_MODE_INPUT_LOCK_NOT_MASK)
)

const (
	XUDTFlagsPlain  = iota // sudt
	XUDTFlagsInArgs        // scripts is in args
	XUDTFlagsInWitness
)

const (
	SUCCESS
	// 0 is the only success code. We can use 0 directly.

	// inherit from simple_udt
	ERROR_ARGUMENTS_LEN   = -1
	ERROR_ENCODING        = -2
	ERROR_SYSCALL         = -3
	ERROR_SCRIPT_TOO_LONG = -21
	ERROR_OVERFLOWING     = -51
	ERROR_AMOUNT          = -52

	// error code is starting from 40 to avoid conflict with
	// common error code in other scripts.
	ERROR_CANT_LOAD_LIB    = 40
	ERROR_CANT_FIND_SYMBOL = iota
	ERROR_INVALID_RCE_ARGS
	ERROR_NOT_ENOUGH_BUFF
	ERROR_INVALID_FLAG

	ERROR_INVALID_ARGS_FORMAT

	ERROR_INVALID_WITNESS_FORMAT
	ERROR_INVALID_MOL_FORMAT
	ERROR_BLAKE2B_ERROR
	ERROR_HASH_MISMATCHED
)

func getFlagFromArgs(args string) uint64 {
	// args.size() >= 4
	// big-edian
	p := []byte{args[0], args[1], args[2], args[3]}
	bytesBuffer := bytes.NewBuffer(p)
	x := binary.ReadUint32(bytesBuffer, binary.BigEndian)
	return uint64(x)
}

func getOwnerModeCheckMethod(val uint64) (bool, bool, bool) {
	owner_mode_for_input_type := false
	owner_mode_for_output_type := false
	// default is on
	owner_mode_for_input_lock := true
	if (val & OWNER_MODE_INPUT_TYPE_MASK) != 0 {
		owner_mode_for_input_type = true
	}
	if (val & OWNER_MODE_OUTPUT_TYPE_MASK) != 0 {
		owner_mode_for_output_type = true
	}
	if (val & OWNER_MODE_INPUT_LOCK_NOT_MASK) != 0 {
		owner_mode_for_input_lock = false
	}
	return owner_mode_for_input_type, owner_mode_for_input_lock, owner_mode_for_output_type
}
type XudtData table {
	amount uint64
	data []byte
}
type Byte32 [4]byte
type XudtArgs table {
	owner_lock_script_hash Byte32
	args []byte
}
type TypeScript table {
	code_hash Byte32
    args XudtArgs
}
type XudtCell table {
	data XudtData
    type_ TypeScript
   	lock []byte
}

func Inputs() []XudtCell {
	// todo
	rawIns := tx.inputs()
	ins := []XudtCell{}
	return ins
}
func Outputs() []XudtCell {
	// todo
	rawOuts := tx.outputs()
	outs := []XudtCell{}
	return outs
}

func xudtArgs() string {
	// todo
	return ""
}

func checkInputLockHash(inputs []XudtCell, args string) bool {
	for _, i := range inputs {
		lockHash := make(string, i.lock)
		if lockHash == args {
			return true
		}
	}
	return false
}

func checkCellsTypeHash(cells []XudtCell, args string) bool {
	for _, i := range cells {
		typeHash := make(string, i.type_.args.args)
		if typeHash == args {
			return true
		}
	}
	return false
}

func loadExtensionScripts() []cell.Script {
	// todo
	return []cell.Script
}
func main() {
	script := tx.checkedLoadScript()
	ok := tx.scriptVerify()
	ins := Inputs()
	args := script.args
	val := getFlagFromArgs(args)
	owner_mode_for_input_type, owner_mode_for_input_lock, owner_mode_for_output_type := getOwnerModeCheckMethod()

	// owner mode checking
	var owner_mode bool
	if owner_mode_for_input_lock && owner_mode == false {
		owner_mode = checkInputLockHash(ins, args[0:32])
	}

	if owner_mode_for_input_type && owner_mode == false {
		owner_mode = checkCellsTypeHash(ins, args[0:32])
	}

	outs := Outputs()
	if owner_mode_for_output_type && owner_mode == false {
		owner_mode = checkCellsTypeHash(outs, args[0:32])
	}

	// parse xUDT args
	argsSize := len(args)
	data := ""
	flags := 0
	if argsSize < (FLAGS_SIZE + tx.BLAKE2B_BLOCK_SIZE) {
		flags = XUDTFlagsPlain
	} else {
		mask := OWNER_MODE_MASK ^ -1 // 0x1FFFFFF
		tempFlags := val & mask
		if tempFlags == XUDTFlagsPlain {
			flags = XUDTFlagsPlain
		} else if tempFlags == XUDTFlagsInArgs {
			flags = XUDTFlagsInArgs
			data = args[tx.BLAKE2B_BLOCK_SIZE+FLAGS_SIZE:]
			// vector <Script> is a dynvec
			vecSize := tx.getVectorRawByteSize(data)
			if vecSize != argsSize-tx.BLAKE2B_BLOCK_SIZE+FLAGS_SIZE {
				return ERROR_INVALID_ARGS_FORMAT
			}
		} else if tempFlags == XUDTFlagsInWitness {
			hash_size := argsSize - tx.BLAKE2B_BLOCK_SIZE - FLAGS_SIZE
			if hash_size != tx.BLAKE160_SIZE {
				return ERROR_INVALID_FLAG
			}
			blake160Hash := args[tx.BLAKE2B_BLOCK_SIZE+FLAGS_SIZE:]
			witness := tx.getWitness()
			witnessBlake2bHash := tx.getBlake2b()
			if witnessBlake2bHash[0:tx.BLAKE160_SIZE] == blake160Hash {
				return ERROR_HASH_MISMATCHED
			}
		} else {
			return ERROR_INVALID_FLAG
		}
	}

	// enable owner script via a script in witness
	if owner_mode == false {
		// get Owner Script, optional filed from witnessArgs.inputType
		ownerScriptRawBytes := "" // witness.intput.ownerScript
		// compute blake2b hash for owner script
		ownerScriptHash := tx.getBlake2b(ownerScriptRawBytes)
		// get 32 byte hash from args
		argsFromHash := args[0:tx.BLAKE2B_BLOCK_SIZE]
		if ownerScriptHash != argsFromHash {
			return ERROR_HASH_MISMATCHED
		}

		// decode ownerScript raw bytes to Script
		var ownerScript cell.Script
		err := tx.executeFunc(ownerScriptHash, ownerScript.hashType, "validate", owner_mode, 0, ownerScript.args)
		if err == SUCCESS {
			owner_mode = true
		}
	}

	// sudt
	in_sum, out_sum := 0, 0
	ins := tx.inputs()
	if len(ins) == int32(0) {
		return ERROR_AMOUNT
	}
	for input := range tx.inputs() {
		in_sum += input
	}

	for output := range tx.outputs() {
		out_sum += output
	}

	if in_sum < out_sum {
		debug.Printf("Invalid Amount")
		return ERROR_AMOUNT
	}
	// Plain mode get done here
	if flags == XUDTFlagsPlain {
    	return SUCCESS
  	}
	// todo: decode extension scripts
	extensionScripts := loadExtensionScripts()
	// execute all scripts
	for i, script := range(extensionScripts) {
		tx.executeFunc(script.codeHash, script.hashType, "validate", owner_mode, i, script.args)
	}
	return SUCCESS
}
